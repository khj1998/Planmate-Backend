plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'jacoco'
}

group = 'com.planmate'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //security
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //swagger, jpa
    implementation 'io.springfox:springfox-boot-starter:3.0.0'  // Swagger-UI
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' //jpa
    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2' // JWT
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2' // JWT
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2' // JWT
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.1.0' // JWT
    //slack
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'
    //s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    //gson
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}

jacoco {
    toolVersion = '0.8.5'
}
jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.enabled true
        xml.enabled false
        csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
    violationRules {
        rule {
            element = 'METHOD'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            excludes = ['*.service.*', '*.controller.LoginController', '*.domain.*', '*.config.*', '*.converter.*', '*.dto.*', '*.enums.*', '*.exception.*', '*.repository.*'
            , '*.util.*', '*.vo.*', '*.ServerApplication.*', '*.aspect.*','**.*Builder*']
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

tasks.named('test') {
    useJUnitPlatform()
}